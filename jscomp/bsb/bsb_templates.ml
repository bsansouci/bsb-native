(* This file has been generated by ocp-ocamlres *)
let root = OCamlRes.Res.([
  Dir  ("basic", [
    Dir  ("src", [
      File  ("demo.ml",
        "\n\
         \n\
         let () = Js.log \"Hello, BuckleScript\"")]) ;
    Dir  (".vscode", [
      File  ("tasks.json",
        "{\n\
        \    \"version\": \"${bsb:proj-version}\",\n\
        \    \"command\": \"npm\",\n\
        \    \"options\": {\n\
        \        \"cwd\": \"${workspaceRoot}\"\n\
        \    },\n\
        \    \"isShellCommand\": true,\n\
        \    \"args\": [\n\
        \        \"run\",\n\
        \        \"watch\"\n\
        \    ],\n\
        \    \"showOutput\": \"always\",\n\
        \    \"isBackground\": true,\n\
        \    \"problemMatcher\": {\n\
        \        \"fileLocation\": \"absolute\",\n\
        \        \"owner\": \"ocaml\",\n\
        \        \"watching\": {\n\
        \            \"activeOnStart\": false,\n\
        \            \"beginsPattern\": \">>>> Start compiling\",\n\
        \            \"endsPattern\": \">>>> Finish compiling\"\n\
        \        },\n\
        \        \"pattern\": [\n\
        \            {\n\
        \                \"regexp\": \"^File \\\"(.*)\\\", line (\\\\d+)(?:, characters (\\\\d+)-(\\\\d+))?:$\",\n\
        \                \"file\": 1,\n\
        \                \"line\": 2,\n\
        \                \"column\": 3,\n\
        \                \"endColumn\": 4\n\
        \            },\n\
        \            {\n\
        \                \"regexp\": \"^(?:(?:Parse\\\\s+)?(Warning|[Ee]rror)(?:\\\\s+\\\\d+)?:)?\\\\s+(.*)$\",\n\
        \                \"severity\": 1,\n\
        \                \"message\": 2,\n\
        \                \"loop\": true\n\
        \            }\n\
        \        ]\n\
        \    }\n\
         }")]) ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \      // add your bs-dependencies here \n\
      \  ],\n\
      \  \"warnings\": {\n\
      \    \"error\" : \"+101\"\n\
      \  },\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  (".gitignore",
      "*.exe\n\
       *.obj\n\
       *.out\n\
       *.compile\n\
       *.native\n\
       *.byte\n\
       *.cmo\n\
       *.annot\n\
       *.cmi\n\
       *.cmx\n\
       *.cmt\n\
       *.cmti\n\
       *.cma\n\
       *.a\n\
       *.cmxa\n\
       *.obj\n\
       *~\n\
       *.annot\n\
       *.cmj\n\
       *.bak\n\
       lib/bs\n\
       *.mlast\n\
       *.mliast\n\
       .vscode\n\
       .merlin\n\
       .bsb.lock") ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically")]) ;
  Dir  ("basic-reason", [
    Dir  ("src", [
      File  ("Demo.re",
        "Js.log(\"Hello, BuckleScript and Reason!\");\n\
         ")]) ;
    Dir  (".vscode", [
      File  ("tasks.json",
        "{\n\
        \    \"version\": \"${bsb:proj-version}\",\n\
        \    \"command\": \"npm\",\n\
        \    \"options\": {\n\
        \      \"cwd\": \"${workspaceRoot}\"\n\
        \    },\n\
        \    \"type\": \"shell\",\n\
        \    \"args\": [\"run\", \"start\"],\n\
        \    \"presentation\": {\n\
        \      \"echo\": true,\n\
        \      \"reveal\": \"always\",\n\
        \      \"focus\": false,\n\
        \      \"panel\": \"shared\"\n\
        \    },\n\
        \    \"isBackground\": true,\n\
        \    \"problemMatcher\": {\n\
        \      \"fileLocation\": \"absolute\",\n\
        \      \"owner\": \"ocaml\",\n\
        \      \"background\": {\n\
        \        \"activeOnStart\": false,\n\
        \        \"beginsPattern\": \">>>> Start compiling\",\n\
        \        \"endsPattern\": \">>>> Finish compiling\"\n\
        \      },\n\
        \      \"pattern\": [\n\
        \        {\n\
        \          \"regexp\":\n\
        \            \"^File \\\"(.*)\\\", line (\\\\d+)(?:, characters (\\\\d+)-(\\\\d+))?:$\",\n\
        \          \"file\": 1,\n\
        \          \"line\": 2,\n\
        \          \"column\": 3,\n\
        \          \"endColumn\": 4\n\
        \        },\n\
        \        {\n\
        \          \"regexp\":\n\
        \            \"^(?:(?:Parse\\\\s+)?(Warning|[Ee]rror)(?:\\\\s+\\\\d+)?:)?\\\\s+(.*)$\",\n\
        \          \"severity\": 1,\n\
        \          \"message\": 2,\n\
        \          \"loop\": true\n\
        \        }\n\
        \      ]\n\
        \    }\n\
        \  }\n\
         ")]) ;
    File  ("bsconfig.json",
      "// This is the configuration file used by BuckleScript's build system bsb. Its documentation lives here: http://bucklescript.github.io/bucklescript/docson/#build-schema.json\n\
       // BuckleScript comes with its own parser for bsconfig.json, which is normal JSON, with the extra support of comments and trailing commas.\n\
       {\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \      // add your dependencies here. You'd usually install them normally through `npm install my-dependency`. If my-dependency has a bsconfig.json too, then everything will work seamlessly.\n\
      \  ],\n\
      \  \"warnings\": {\n\
      \    \"error\" : \"+101\"\n\
      \  },\n\
      \  \"namespace\": true,\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w\",\n\
      \    \"clean\": \"bsb -clean-world\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }\n\
       ") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/\n\
       ") ;
    File  ("README.md",
      "# Basic Reason Template\n\
       \n\
       Hello! This project allows you to quickly get started with Reason and BuckleScript. If you wanted a more sophisticated version, try the `react` template (`bsb -theme react -init .`).\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Build + Watch\n\
       \n\
       ```\n\
       npm run start\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically\n\
       ")]) ;
  Dir  ("generator", [
    Dir  ("src", [
      File  ("test.cpp.ml",
        "\n\
         (* \n\
         #define FS_VAL(name,ty) external name : ty = \"\" [@@bs.module \"fs\"]\n\
         \n\
         \n\
         FS_VAL(readdirSync, string -> string array)\n\
        \ *)\n\
         \n\
         \n\
        \ let ocaml = OCAML") ;
      File  ("demo.ml",
        "\n\
         \n\
         let () = Js.log \"Hello, BuckleScript\"")]) ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \    \"dir\": \"src\",\n\
      \    \"generators\": [{\n\
      \      \"name\": \"cpp\",\n\
      \      \"edge\": [\"test.ml\", \":\", \"test.cpp.ml\"]\n\
      \    }],\n\
      \    \"subdirs\": true  \n\
      \  },\n\
      \  \"generators\": [{\n\
      \    \"name\" : \"cpp\",\n\
      \    \"command\": \"sed 's/OCAML/3/' $in > $out\"\n\
      \  }],\n\
      \  \"bs-dependencies\" : [\n\
      \  ]\n\
       }") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  (".gitignore",
      "*.exe\n\
       *.obj\n\
       *.out\n\
       *.compile\n\
       *.native\n\
       *.byte\n\
       *.cmo\n\
       *.annot\n\
       *.cmi\n\
       *.cmx\n\
       *.cmt\n\
       *.cmti\n\
       *.cma\n\
       *.a\n\
       *.cmxa\n\
       *.obj\n\
       *~\n\
       *.annot\n\
       *.cmj\n\
       *.bak\n\
       lib/bs\n\
       *.mlast\n\
       *.mliast\n\
       .vscode\n\
       .merlin\n\
       .bsb.lock") ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically")]) ;
  Dir  ("minimal", [
    Dir  ("src", [ File  ("main.ml", "")]) ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"sources\": {\n\
      \      \"dir\": \"src\",\n\
      \      \"subdirs\": true\n\
      \  }\n\
       }") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/") ;
    File  ("README.md",
      "\n\
      \  # ${bsb:name}")]) ;
  Dir  ("node", [
    Dir  ("src", [
      File  ("demo.ml",
        "\n\
         \n\
         let () = Js.log \"Hello, BuckleScript\"")]) ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \      \"dir\": \"src\",\n\
      \      \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \   ]\n\
       }") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  (".gitignore",
      "*.exe\n\
       *.obj\n\
       *.out\n\
       *.compile\n\
       *.native\n\
       *.byte\n\
       *.cmo\n\
       *.annot\n\
       *.cmi\n\
       *.cmx\n\
       *.cmt\n\
       *.cmti\n\
       *.cma\n\
       *.a\n\
       *.cmxa\n\
       *.obj\n\
       *~\n\
       *.annot\n\
       *.cmj\n\
       *.bak\n\
       lib/bs\n\
       *.mlast\n\
       *.mliast\n\
       .vscode\n\
       .merlin\n\
       .bsb.lock") ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically\n\
       ")]) ;
  Dir  ("react", [
    Dir  ("src", [
      File  ("Index.re",
        "ReactDOMRe.renderToElementWithId(<Component1 message=\"Hello! Click this text.\" />, \"index1\");\n\
         \n\
         ReactDOMRe.renderToElementWithId(<Component2 greeting=\"Hello!\" />, \"index2\");\n\
         ") ;
      File  ("Component1.re",
        "/* This is the basic component. */\n\
         let component = ReasonReact.statelessComponent(\"Component1\");\n\
         \n\
         /* Your familiar handleClick from ReactJS. This mandatorily takes the payload,\n\
        \   then the `self` record, which contains state (none here), `handle`, `reduce`\n\
        \   and other utilities */\n\
         let handleClick = (_event, _self) => Js.log(\"clicked!\");\n\
         \n\
         /* `make` is the function that mandatorily takes `children` (if you want to use\n\
        \   `JSX). `message` is a named argument, which simulates ReactJS props. Usage:\n\
         \n\
        \   `<Component1 message=\"hello\" />`\n\
         \n\
        \   Which desugars to\n\
         \n\
        \   `ReasonReact.element(Component1.make(~message=\"hello\", [||]))` */\n\
         let make = (~message, _children) => {\n\
        \  ...component,\n\
        \  render: self =>\n\
        \    <div onClick={self.handle(handleClick)}>\n\
        \      {ReasonReact.string(message)}\n\
        \    </div>,\n\
         };\n\
         ") ;
      File  ("Component2.re",
        "/* State declaration */\n\
         type state = {\n\
        \  count: int,\n\
        \  show: bool,\n\
         };\n\
         \n\
         /* Action declaration */\n\
         type action =\n\
        \  | Click\n\
        \  | Toggle;\n\
         \n\
         /* Component template declaration.\n\
        \   Needs to be **after** state and action declarations! */\n\
         let component = ReasonReact.reducerComponent(\"Example\");\n\
         \n\
         /* greeting and children are props. `children` isn't used, therefore ignored.\n\
        \   We ignore it by prepending it with an underscore */\n\
         let make = (~greeting, _children) => {\n\
        \  /* spread the other default fields of component here and override a few */\n\
        \  ...component,\n\
         \n\
        \  initialState: () => {count: 0, show: true},\n\
         \n\
        \  /* State transitions */\n\
        \  reducer: (action, state) =>\n\
        \    switch (action) {\n\
        \    | Click => ReasonReact.Update({...state, count: state.count + 1})\n\
        \    | Toggle => ReasonReact.Update({...state, show: ! state.show})\n\
        \    },\n\
         \n\
        \  render: self => {\n\
        \    let message =\n\
        \      \"You've clicked this \" ++ string_of_int(self.state.count) ++ \" times(s)\";\n\
        \    <div>\n\
        \      <button onClick={_event => self.send(Click)}>\n\
        \        {ReasonReact.string(message)}\n\
        \      </button>\n\
        \      <button onClick={_event => self.send(Toggle)}>\n\
        \        {ReasonReact.string(\"Toggle greeting\")}\n\
        \      </button>\n\
        \      {self.state.show ? ReasonReact.string(greeting) : ReasonReact.null}\n\
        \    </div>;\n\
        \  },\n\
         };\n\
         ") ;
      File  ("index.html",
        "<!DOCTYPE html>\n\
         <html lang=\"en\">\n\
         <head>\n\
        \  <meta charset=\"UTF-8\">\n\
        \  <title>ReasonReact Examples</title>\n\
         </head>\n\
         <body>\n\
        \  Component 1:\n\
        \  <div id=\"index1\"></div>\n\
         \n\
        \  Component 2:\n\
        \  <div id=\"index2\"></div>\n\
         \n\
        \  <script src=\"Index.js\"></script>\n\
         </body>\n\
         </html>\n\
         ")]) ;
    File  ("bsconfig.json",
      "/* This is the BuckleScript configuration file. Note that this is a comment;\n\
      \  BuckleScript comes with a JSON parser that supports comments and trailing\n\
      \  comma. If this screws with your editor highlighting, please tell us by filing\n\
      \  an issue! */\n\
       {\n\
      \  \"name\": \"react-template\",\n\
      \  \"reason\": {\n\
      \    \"react-jsx\": 2\n\
      \  },\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": [{\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  }],\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"namespace\": true,\n\
      \  \"bs-dependencies\": [\n\
      \    \"reason-react\"\n\
      \  ],\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w\",\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\
      \    \"webpack\": \"webpack -w\",\n\
      \    \"webpack:production\": \"NODE_ENV=production webpack\",\n\
      \    \"server\": \"webpack-dev-server\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"dependencies\": {\n\
      \    \"react\": \"^16.2.0\",\n\
      \    \"react-dom\": \"^16.2.0\",\n\
      \    \"reason-react\": \">=0.4.0\"\n\
      \  },\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\",\n\
      \    \"html-webpack-plugin\": \"^3.2.0\",\n\
      \    \"webpack\": \"^4.0.1\",\n\
      \    \"webpack-cli\": \"^3.1.1\",\n\
      \    \"webpack-dev-server\": \"^3.1.8\"\n\
      \  }\n\
       }\n\
       ") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/") ;
    File  ("README.md",
      "# ${bsb:name}\n\
       \n\
       ## Run Project\n\
       \n\
       ```sh\n\
       npm install\n\
       npm start\n\
       # in another tab\n\
       npm run webpack\n\
       ```\n\
       \n\
       After you see the webpack compilation succeed (the `npm run webpack` step), open up `build/index.html` (**no server needed!**). Then modify whichever `.re` file in `src` and refresh the page to see the changes.\n\
       \n\
       **For more elaborate ReasonReact examples**, please see https://github.com/reasonml-community/reason-react-example\n\
       \n\
       ## Run Project with Server\n\
       \n\
       To run with the webpack development server run `npm run server` and view in the browser at http://localhost:8000. Running in this environment provides hot reloading and support for routing; just edit and save the file and the browser will automatically refresh.\n\
       \n\
       Note that any hot reload on a route will fall back to the root (`/`), so `ReasonReact.Router.dangerouslyGetInitialUrl` will likely be needed alongside the `ReasonReact.Router.watchUrl` logic to handle routing correctly on hot reload refreshes or simply opening the app at a URL that is not the root.\n\
       \n\
       To use a port other than 8000 set the `PORT` environment variable (`PORT=8080 npm run server`).\n\
       \n\
       ## Build for Production\n\
       \n\
       ```sh\n\
       npm run build\n\
       npm run webpack:production\n\
       ```\n\
       \n\
       This will replace the development artifact `build/Index.js` for an optimized version as well as copy `src/index.html` into `build/`. You can then deploy the contents of the `build` directory (`index.html` and `Index.js`).\n\
       \n\
       If you make use of routing (via `ReasonReact.Router` or similar logic) ensure that server-side routing handles your routes or that 404's are directed back to `index.html` (which is how the dev server is set up).\n\
       \n\
       **To enable dead code elimination**, change `bsconfig.json`'s `package-specs` `module` from `\"commonjs\"` to `\"es6\"`. Then re-run the above 2 commands. This will allow Webpack to remove unused code.\n\
       ") ;
    File  ("webpack.config.js",
      "const path = require('path');\n\
       const HtmlWebpackPlugin = require('html-webpack-plugin')\n\
       const outputDir = path.join(__dirname, 'build/');\n\
       \n\
       const isProd = process.env.NODE_ENV === 'production';\n\
       \n\
       module.exports = {\n\
      \  entry: './src/Index.bs.js',\n\
      \  mode: isProd ? 'production' : 'development',\n\
      \  output: {\n\
      \    path: outputDir,\n\
      \    publicPath: outputDir,\n\
      \    filename: 'Index.js',\n\
      \  },\n\
      \  plugins: [\n\
      \    new HtmlWebpackPlugin({\n\
      \      template: 'src/index.html',\n\
      \      inject: false\n\
      \    })\n\
      \  ],\n\
      \  devServer: {\n\
      \    compress: true,\n\
      \    contentBase: outputDir,\n\
      \    port: process.env.PORT || 8000,\n\
      \    historyApiFallback: true\n\
      \  }\n\
       };\n\
       ")]) ;
  Dir  ("react-lite", [
    Dir  ("src", [
      File  ("Index.re",
        "ReactDOMRe.renderToElementWithId(<Component1 message=\"Hello! Click this text.\" />, \"index1\");\n\
         \n\
         ReactDOMRe.renderToElementWithId(<Component2 greeting=\"Hello!\" />, \"index2\");\n\
         ") ;
      File  ("Component1.re",
        "/* This is the basic component. */\n\
         let component = ReasonReact.statelessComponent(\"Component1\");\n\
         \n\
         /* Your familiar handleClick from ReactJS. This mandatorily takes the payload,\n\
        \   then the `self` record, which contains state (none here), `handle`, `reduce`\n\
        \   and other utilities */\n\
         let handleClick = (_event, _self) => Js.log(\"clicked!\");\n\
         \n\
         /* `make` is the function that mandatorily takes `children` (if you want to use\n\
        \   `JSX). `message` is a named argument, which simulates ReactJS props. Usage:\n\
         \n\
        \   `<Component1 message=\"hello\" />`\n\
         \n\
        \   Which desugars to\n\
         \n\
        \   `ReasonReact.element(Component1.make(~message=\"hello\", [||]))` */\n\
         let make = (~message, _children) => {\n\
        \  ...component,\n\
        \  render: self =>\n\
        \    <div onClick=(self.handle(handleClick))>\n\
        \      {ReasonReact.string(message)}\n\
        \    </div>,\n\
         };\n\
         ") ;
      File  ("Component2.re",
        "/* State declaration */\n\
         type state = {\n\
        \  count: int,\n\
        \  show: bool,\n\
         };\n\
         \n\
         /* Action declaration */\n\
         type action =\n\
        \  | Click\n\
        \  | Toggle;\n\
         \n\
         /* Component template declaration.\n\
        \   Needs to be **after** state and action declarations! */\n\
         let component = ReasonReact.reducerComponent(\"Example\");\n\
         \n\
         /* greeting and children are props. `children` isn't used, therefore ignored.\n\
        \   We ignore it by prepending it with an underscore */\n\
         let make = (~greeting, _children) => {\n\
        \  /* spread the other default fields of component here and override a few */\n\
        \  ...component,\n\
         \n\
        \  initialState: () => {count: 0, show: true},\n\
         \n\
        \  /* State transitions */\n\
        \  reducer: (action, state) =>\n\
        \    switch (action) {\n\
        \    | Click => ReasonReact.Update({...state, count: state.count + 1})\n\
        \    | Toggle => ReasonReact.Update({...state, show: ! state.show})\n\
        \    },\n\
         \n\
        \  render: self => {\n\
        \    let message =\n\
        \      \"You've clicked this \" ++ string_of_int(self.state.count) ++ \" times(s)\";\n\
        \    <div>\n\
        \      <button onClick={_event => self.send(Click)}>\n\
        \        {ReasonReact.string(message)}\n\
        \      </button>\n\
        \      <button onClick={_event => self.send(Toggle)}>\n\
        \        {ReasonReact.string(\"Toggle greeting\")}\n\
        \      </button>\n\
        \      {self.state.show ? ReasonReact.string(greeting) : ReasonReact.null}\n\
        \    </div>;\n\
        \  },\n\
         };\n\
         ")]) ;
    File  ("loader.js",
      "/* Copyright (C) 2018 Authors of BuckleScript\n\
      \ * \n\
      \ * This program is free software: you can redistribute it and/or modify\n\
      \ * it under the terms of the GNU Lesser General Public License as published by\n\
      \ * the Free Software Foundation, either version 3 of the License, or\n\
      \ * (at your option) any later version.\n\
      \ *\n\
      \ * In addition to the permissions granted to you by the LGPL, you may combine\n\
      \ * or link a \"work that uses the Library\" with a publicly distributed version\n\
      \ * of this file to produce a combined library or application, then distribute\n\
      \ * that combined work under the terms of your choosing, with no requirement\n\
      \ * to comply with the obligations normally placed on you by section 4 of the\n\
      \ * LGPL version 3 (or the corresponding section of a later version of the LGPL\n\
      \ * should you choose to use a later version).\n\
      \ *\n\
      \ * This program is distributed in the hope that it will be useful,\n\
      \ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
      \ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
      \ * GNU Lesser General Public License for more details.\n\
      \ * \n\
      \ * You should have received a copy of the GNU Lesser General Public License\n\
      \ * along with this program; if not, write to the Free Software\n\
      \ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */\n\
       \n\
       \n\
       \n\
       //@ts-check\n\
       \n\
       // @ts-ignore\n\
       window.process = { env: { NODE_ENV: 'dev' } }\n\
       \n\
       \n\
       // local to getPath\n\
       var relativeElement = document.createElement(\"a\");\n\
       var baseElement = document.createElement(\"base\");\n\
       document.head.appendChild(baseElement);\n\
       \n\
       export function BsGetPath(id, parent) {\n\
      \    var oldPath = baseElement.href\n\
      \    baseElement.href = parent\n\
      \    relativeElement.href = id\n\
      \    var result = relativeElement.href\n\
      \    baseElement.href = oldPath\n\
      \    return result\n\
       }\n\
       /**\n\
      \ * \n\
      \ * Given current link and its parent, return the new link\n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * @return {string}\n\
      \ */\n\
       function getPathWithJsSuffix(id, parent) {\n\
      \    var oldPath = baseElement.href\n\
      \    baseElement.href = parent\n\
      \    relativeElement.href = id\n\
      \    var result = addSuffixJsIfNot(relativeElement.href)\n\
      \    baseElement.href = oldPath\n\
      \    return result\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} x \n\
      \ */\n\
       function addSuffixJsIfNot(x) {\n\
      \    if (x.endsWith('.js')) {\n\
      \        return x\n\
      \    } else {\n\
      \        return x + '.js'\n\
      \    }\n\
       }\n\
       \n\
       \n\
       var falsePromise = Promise.resolve(false)\n\
       var fetchConfig = {'cache' : 'no-cache'}\n\
       // package.json semantics\n\
       // a string to module object \n\
       // from url -> module object \n\
       // Modules : Map<string, Promise < boolean | string > \n\
       // fetch the link:\n\
       // - if it is already fetched before, return the stored promise\n\
       //   otherwise create the promise which will be filled with the text if successful\n\
       //   or filled with boolean false when failed\n\
       var MODULES = new Map()\n\
       function cachedFetch(link) {\n\
      \    // console.info(link)\n\
      \    var linkResult = MODULES.get(link)\n\
      \    if (linkResult) {\n\
      \        return linkResult\n\
      \    } else {\n\
      \        var p = fetch(link, fetchConfig)\n\
      \            .then(resp => {\n\
      \                if (resp.ok) {\n\
      \                    return resp.text()\n\
      \                } else {\n\
      \                    return falsePromise\n\
      \                }\n\
      \            })\n\
       \n\
      \        MODULES.set(link, p)\n\
      \        return p\n\
      \    }\n\
       }\n\
       \n\
       // from location id -> url \n\
       // There are two rounds of caching:\n\
       // 1. if location and relative path is hit, no need to run \n\
       // 2. if location and relative path is not hit, but the resolved link is hit, no need \n\
       //     for network request\n\
       /**\n\
      \ * @type {Map<string, Map<string, Promise<any> > > }\n\
      \ */\n\
       var IDLocations = new Map()\n\
       \n\
       /**\n\
      \ * @type {Map<string, Map<string, any> > }\n\
      \ */\n\
       var SyncedIDLocations = new Map()\n\
       // Its value is an object \n\
       // { link : String }\n\
       // We will first mark it when visiting (to avoid duplicated computation)\n\
       // and populate its link later\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ */\n\
       function getIdLocation(id, location) {\n\
      \    var idMap = IDLocations.get(location)\n\
      \    if (idMap) {\n\
      \        return idMap.get(id)\n\
      \    }\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ */\n\
       function getIdLocationSync(id, location) {\n\
      \    var idMap = SyncedIDLocations.get(location)\n\
      \    if (idMap) {\n\
      \        return idMap.get(id)\n\
      \    }\n\
       }\n\
       \n\
       function countIDLocations() {\n\
      \    var count = 0\n\
      \    for (let [k, vv] of IDLocations) {\n\
      \        for (let [kv, v] of vv) {\n\
      \            count += 1\n\
      \        }\n\
      \    }\n\
      \    console.log(count, 'modules loaded')\n\
       }\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ * @param {Function} cb \n\
      \ * @returns Promise<any>\n\
      \ */\n\
       function visitIdLocation(id, location, cb) {\n\
      \    var result;\n\
      \    var idMap = IDLocations.get(location)\n\
      \    if (idMap && (result = idMap.get(id))) {\n\
      \        return result\n\
      \    }\n\
      \    else {\n\
      \        result = new Promise(resolve => {\n\
      \            return (cb()).then(res => {\n\
      \                var idMap = SyncedIDLocations.get(location)\n\
      \                if (idMap) {\n\
      \                    idMap.set(id, res)\n\
      \                } else {\n\
      \                    SyncedIDLocations.set(location, new Map([[id, res]]))\n\
      \                }\n\
      \                return resolve(res)\n\
      \            })\n\
      \        })\n\
      \        if (idMap) {\n\
      \            idMap.set(id, result)\n\
      \        }\n\
      \        else {\n\
      \            IDLocations.set(location, new Map([[id, result]]))\n\
      \        }\n\
      \        return result\n\
      \    }\n\
       }\n\
       \n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @return {string[]}\n\
      \ */\n\
       function getDeps(text) {\n\
      \    var deps = []\n\
      \    text.replace(/(\\/\\*[\\w\\W]*?\\*\\/|\\/\\/[^\\n]*|[.$]r)|\\brequire\\s*\\(\\s*[\"']([^\"']*)[\"']\\s*\\)/g, function (_, ignore, id) {\n\
      \        if (!ignore) deps.push(id);\n\
      \    });\n\
      \    return deps;\n\
       }\n\
       \n\
       \n\
       \n\
       // By using a named \"eval\" most browsers will execute in the global scope.\n\
       // http://www.davidflanagan.com/2010/12/global-eval-in.html\n\
       var globalEval = eval;\n\
       \n\
       // function parentURL(url) {\n\
       //     if (url.endsWith('/')) {\n\
       //         return url + '../'\n\
       //     } else {\n\
       //         return url + '/../'\n\
       //     }\n\
       // }\n\
       \n\
       \n\
       \n\
       // loader.js:23 http://localhost:8080/node_modules/react-dom/cjs/react-dom.development.js/..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//../ fbjs/lib/containsNode Promise\xC2\xA0{<pending>}\n\
       // 23:10:02.884 loader.js:23 http://localhost:8080/node_modules/react-dom/cjs/react-dom.development.js/..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//../ fbjs/lib/invariant Promise\xC2\xA0{<pending>}\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ */\n\
       function getParentModulePromise(id, parent) {\n\
      \    var parentLink = BsGetPath('..', parent)\n\
      \    if (parentLink === parent) {\n\
      \        return falsePromise\n\
      \    }\n\
      \    return getPackageJsPromise(id, parentLink)\n\
       }\n\
       // In the beginning\n\
       // it is `resolveModule('./main.js', '')\n\
       // return the promise of link and text \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ */\n\
       function getPackageName(id) {\n\
      \    var index = id.indexOf('/')\n\
      \    if (id[0] === '@') index = id.indexOf('/', index + 1)\n\
      \    if (index === -1) {\n\
      \        return id\n\
      \    }\n\
      \    return id.substring(0, index)\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} s \n\
      \ * @param {string} text \n\
      \ * @returns {undefined | string }\n\
      \ */\n\
       function isJustAPackageAndHasMainField(s,text){\n\
      \    if(s.indexOf('/') >= 0){\n\
      \        return \n\
      \    } else {\n\
      \        var mainField; \n\
      \        try {\n\
      \            mainField = JSON.parse(text).main\n\
      \        }catch(_){\n\
      \        }\n\
      \        if(mainField === undefined){\n\
      \            return \n\
      \        } else {\n\
      \            return mainField\n\
      \        }\n\
      \    }\n\
       }\n\
       function getPackageJsPromise(id, parent) {\n\
      \    var idNodeModulesPrefix = './node_modules/' + id\n\
      \    var link = getPathWithJsSuffix(idNodeModulesPrefix, parent)\n\
      \    if (parent.endsWith('node_modules/')) {\n\
      \        // impossible that `node_modules/node_modules/xx/x\n\
      \        // return falsePromise\n\
      \        return getParentModulePromise(id, parent)\n\
      \    }\n\
       \n\
      \    var packageJson = BsGetPath(`./node_modules/${getPackageName(id)}/package.json`, parent)\n\
       \n\
      \    return cachedFetch(packageJson)\n\
      \        .then(\n\
      \            function (text) {\n\
      \                if (text !== false) {\n\
      \                    var mainField; \n\
      \                    if( (mainField = isJustAPackageAndHasMainField(id, text)) !== undefined){\n\
      \                        var packageLink = BsGetPath(addSuffixJsIfNot(`./node_modules/${id}/${mainField}`), parent)\n\
      \                        return cachedFetch(packageLink)\n\
      \                            .then(function(text){\n\
      \                                if(text !== false){\n\
      \                                    return {text, link : packageLink}\n\
      \                                } else {\n\
      \                                    return getParentModulePromise(id,parent)\n\
      \                                }\n\
      \                            })\n\
       \n\
      \                    } else {\n\
      \                    // package indeed exist\n\
      \                    return cachedFetch(link).then(function (text) {\n\
      \                        if (text !== false) {\n\
      \                            return { text, link }\n\
      \                        } else if (!id.endsWith('.js')) {\n\
      \                            var linkNew = getPathWithJsSuffix(idNodeModulesPrefix + `/index.js`, parent)\n\
      \                            return cachedFetch(linkNew)\n\
      \                                .then(function (text) {\n\
      \                                    if (text !== false) {\n\
      \                                        return { text, link: linkNew }\n\
      \                                    } else {\n\
      \                                        return getParentModulePromise(id, parent)\n\
      \                                    }\n\
      \                                })\n\
       \n\
      \                        } else {\n\
      \                            return getParentModulePromise(id, parent)\n\
      \                        }\n\
      \                    })\n\
      \                }\n\
      \                }\n\
      \                else {\n\
      \                    return getParentModulePromise(id, parent)\n\
      \                }\n\
      \            }\n\
      \        )\n\
       \n\
       \n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * can return Promise <boolean | object>, false means\n\
      \ * this module can not be resolved\n\
      \ */\n\
       function getModulePromise(id, parent) {\n\
      \    var done = getIdLocation(id, parent)\n\
      \    if (!done) {\n\
      \        return visitIdLocation(id, parent, function () {\n\
      \            if (id[0] != '.') { // package path\n\
      \                return getPackageJsPromise(id, parent)\n\
      \            } else { // relative path, one shot resolve            \n\
      \                let link = getPathWithJsSuffix(id, parent)\n\
      \                return cachedFetch(link).then(\n\
      \                    function (text) {\n\
      \                        if (text !== false) {\n\
      \                            return { text, link }\n\
      \                        } else if (!id.endsWith('.js')){                            \n\
      \                            // could be \"./dir\"\n\
      \                            var newLink = getPathWithJsSuffix( id +\"/index.js\",parent)\n\
      \                            return cachedFetch(newLink)\n\
      \                            .then(function(text){\n\
      \                                if(text !== false){\n\
      \                                    return{text, link : newLink }\n\
      \                                } else {\n\
      \                                    throw new Error(` ${id} : ${parent} could not be resolved`)\n\
      \                                }\n\
      \                            })\n\
      \                        }\n\
      \                        else {\n\
      \                            throw new Error(` ${id} : ${parent} could not be resolved`)\n\
      \                        }\n\
      \                    }\n\
      \                )\n\
      \            }\n\
      \        })\n\
      \    } else {\n\
      \        return done\n\
      \    }\n\
       }\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * @returns {Promise<any>}\n\
      \ */\n\
       function getAll(id, parent) {\n\
      \    return getModulePromise(id, parent)\n\
      \        .then(function (obj) {\n\
      \            if (obj) {\n\
      \                var deps = getDeps(obj.text)\n\
      \                return Promise.all(deps.map(x => getAll(x, obj.link)))\n\
      \            } else {\n\
      \                throw new Error(`${id}@${parent} was not resolved successfully`)\n\
      \            }\n\
      \        })\n\
       };\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @param {string} parent \n\
      \ * @returns {Promise<any>}\n\
      \ */\n\
       function getAllFromText(text, parent) {\n\
      \    var deps = getDeps(text)\n\
      \    return Promise.all(deps.map(x => getAll(x, parent)))\n\
       }\n\
       \n\
       var evaluatedModules = new Map()\n\
       \n\
       function loadSync(id, parent) {\n\
      \    var baseOrModule = getIdLocationSync(id, parent)\n\
      \    if (baseOrModule && baseOrModule.link !== undefined) {\n\
      \        if(evaluatedModules.has(baseOrModule.link)){\n\
      \            return evaluatedModules.get(baseOrModule.link).exports\n\
      \        }\n\
      \        if (!baseOrModule.exports) {\n\
      \            baseOrModule.exports = {}\n\
      \            globalEval(`(function(require,exports,module){${baseOrModule.text}\\n})//# sourceURL=${baseOrModule.link}`)(\n\
      \                function require(id) {\n\
      \                    return loadSync(id, baseOrModule.link);\n\
      \                }, // require\n\
      \                baseOrModule.exports = {}, // exports\n\
      \                baseOrModule // module\n\
      \            );\n\
      \        }\n\
      \        if(!evaluatedModules.has(baseOrModule.link)){\n\
      \            evaluatedModules.set(baseOrModule.link,baseOrModule)\n\
      \        }\n\
      \        return baseOrModule.exports\n\
      \    } else {\n\
      \        throw new Error(`${id} : ${parent} could not be resolved`)\n\
      \    }\n\
       }\n\
       \n\
       \n\
       function genEvalName() {\n\
      \    return \"eval-\" + ((\"\" + Math.random()).substr(2, 5))\n\
       }\n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @param {string} link\n\
      \ * In this case [text] evaluated result will not be cached\n\
      \ */\n\
       function loadTextSync(text, link) {\n\
      \    var baseOrModule = { exports: {}, text, link }\n\
      \    globalEval(`(function(require,exports,module){${baseOrModule.text}\\n})//# sourceURL=${baseOrModule.link}/${genEvalName()}.js`)(\n\
      \        function require(id) {\n\
      \            return loadSync(id, baseOrModule.link);\n\
      \        }, // require\n\
      \        baseOrModule.exports, // exports\n\
      \        baseOrModule // module\n\
      \    );\n\
      \    return baseOrModule.exports\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ */\n\
       function BSloadText(text) {\n\
      \    console.time(\"Loading\")\n\
      \    var parent = BsGetPath(\".\", document.baseURI)\n\
      \    return getAllFromText(text, parent).then(function () {\n\
      \        var result = loadTextSync(text, parent)\n\
      \        console.timeEnd(\"Loading\")\n\
      \        return result\n\
      \    })\n\
       };\n\
       \n\
       \n\
       function load(id, parent) {\n\
      \    return getAll(id, parent).then(function () {\n\
      \        return loadSync(id, parent)\n\
      \    })\n\
       \n\
       };\n\
       \n\
       \n\
       export function BSload(id) {\n\
      \    var parent = BsGetPath(\".\", document.baseURI)\n\
      \    return load(id, parent)\n\
       }\n\
       \n\
       export var BSLoader = {\n\
      \    loadText: BSloadText,\n\
      \    load: BSload,\n\
      \    SyncedIDLocations: SyncedIDLocations\n\
       };\n\
       \n\
       window.BSLoader = BSLoader;\n\
       \n\
       var main = document.querySelector('script[data-main]')\n\
       if (main) {\n\
      \    BSload(main.dataset.main)\n\
       }\n\
       ") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"react-lite\",\n\
      \  \"reason\": {\n\
      \    \"react-jsx\": 2\n\
      \  },\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": [{\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  }],\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"namespace\": true,\n\
      \  \"bs-dependencies\": [\n\
      \    \"reason-react\"\n\
      \  ],\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    File  ("watcher.js",
      "\n\
       \n\
       var wsReloader;\n\
       var LAST_SUCCESS_BUILD_STAMP = (localStorage.getItem('LAST_SUCCESS_BUILD_STAMP') || 0)\n\
       var WS_PORT = 9999; // configurable\n\
       \n\
       function setUpWebScoket() {\n\
      \    if (wsReloader == null || wsReloader.readyState !== 1) {\n\
      \        try {\n\
      \            wsReloader = new WebSocket(`ws://localhost:${WS_PORT}`)\n\
      \            wsReloader.onmessage = (msg) => {\n\
      \                var newData = JSON.parse(msg.data).LAST_SUCCESS_BUILD_STAMP\n\
      \                if (newData > LAST_SUCCESS_BUILD_STAMP) {\n\
      \                    LAST_SUCCESS_BUILD_STAMP = newData\n\
      \                    localStorage.setItem('LAST_SUCCESS_BUILD_STAMP', LAST_SUCCESS_BUILD_STAMP)\n\
      \                    location.reload(true)\n\
      \                }\n\
       \n\
      \            }\n\
      \        } catch (exn) {\n\
      \            console.error(\"web socket failed connect\")\n\
      \        }\n\
      \    }\n\
       };\n\
       \n\
       setUpWebScoket();\n\
       setInterval(setUpWebScoket, 2000);") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w -ws _ \",\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"dependencies\": {\n\
      \    \"react\": \"^16.2.0\",\n\
      \    \"react-dom\": \"^16.2.0\",\n\
      \    \"reason-react\": \">=0.4.0\"\n\
      \  },\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }\n\
       ") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/") ;
    File  ("README.md",
      "# react\n\
       \n\
       ## Run Project\n\
       \n\
       ```sh\n\
       npm install\n\
       npm start\n\
       ```\n\
       \n\
       Suppose you have a http-server running (try `npm i -g http-server`)\n\
       \n\
       \n\
       Then modify whichever `.re` file in `src` and refresh the page to see the changes.\n\
       \n\
       **For more elaborate ReasonReact examples**, please see https://github.com/reasonml-community/reason-react-example\n\
       \n\
       ") ;
    File  ("index.html",
      "<!DOCTYPE html>\n\
       <html lang=\"en\">\n\
       <head>\n\
      \  <meta charset=\"UTF-8\">\n\
      \  <title>ReasonReact Examples</title>\n\
       </head>\n\
       <body>\n\
      \  Component 1:\n\
      \  <div id=\"index1\"></div>\n\
      \  Component 2:\n\
      \  <div id=\"index2\"></div>\n\
       \n\
      \  <script src=\"./loader.js\" type=\"module\" data-main=\"./src/Index.bs.js\"></script>\n\
      \  <script src=\"./watcher.js\" type=\"module\"></script>\n\
       </body>\n\
       </html>\n\
       ")]) ;
  Dir  ("tea", [
    Dir  ("src", [
      File  ("main.ml",
        "\n\
         \n\
         \n\
         Js.Global.setTimeout\n\
        \  (fun _ -> \n\
        \  Demo.main (Web.Document.getElementById \"my-element\") () \n\
        \  |. ignore\n\
        \  )  \n\
         0") ;
      File  ("demo.ml",
        "(* This line opens the Tea.App modules into the current scope for Program access functions and types *)\n\
         open Tea.App\n\
         \n\
         (* This opens the Elm-style virtual-dom functions and types into the current scope *)\n\
         open Tea.Html\n\
         \n\
         (* Let's create a new type here to be our main message type that is passed around *)\n\
         type msg =\n\
        \  | Increment  (* This will be our message to increment the counter *)\n\
        \  | Decrement  (* This will be our message to decrement the counter *)\n\
        \  | Reset      (* This will be our message to reset the counter to 0 *)\n\
        \  | Set of int (* This will be our message to set the counter to a specific value *)\n\
        \  [@@bs.deriving {accessors}] (* This is a nice quality-of-life addon from Bucklescript, it will generate function names for each constructor name, optional, but nice to cut down on code, this is unused in this example but good to have regardless *)\n\
         \n\
         (* This is optional for such a simple example, but it is good to have an `init` function to define your initial model default values, the model for Counter is just an integer *)\n\
         let init () = 4\n\
         \n\
         (* This is the central message handler, it takes the model as the first argument *)\n\
         let update model = function (* These should be simple enough to be self-explanatory, mutate the model based on the message, easy to read and follow *)\n\
        \  | Increment -> model + 1\n\
        \  | Decrement -> model - 1\n\
        \  | Reset -> 0\n\
        \  | Set v -> v\n\
         \n\
         (* This is just a helper function for the view, a simple function that returns a button based on some argument *)\n\
         let view_button title msg =\n\
        \  button\n\
        \    [ onClick msg\n\
        \    ]\n\
        \    [ text title\n\
        \    ]\n\
         \n\
         (* This is the main callback to generate the virtual-dom.\n\
        \  This returns a virtual-dom node that becomes the view, only changes from call-to-call are set on the real DOM for efficiency, this is also only called once per frame even with many messages sent in within that frame, otherwise does nothing *)\n\
         let view model =\n\
        \  div\n\
        \    []\n\
        \    [ span\n\
        \        [ style \"text-weight\" \"bold\" ]\n\
        \        [ text (string_of_int model) ]\n\
        \    ; br []\n\
        \    ; view_button \"Increment\" Increment\n\
        \    ; br []\n\
        \    ; view_button \"Decrement\" Decrement\n\
        \    ; br []\n\
        \    ; view_button \"Set to 2\" (Set 42)\n\
        \    ; br []\n\
        \    ; if model <> 0 then view_button \"Reset\" Reset else noNode\n\
        \    ]\n\
         \n\
         (* This is the main function, it can be named anything you want but `main` is traditional.\n\
        \  The Program returned here has a set of callbacks that can easily be called from\n\
        \  Bucklescript or from javascript for running this main attached to an element,\n\
        \  or even to pass a message into the event loop.  You can even expose the\n\
        \  constructors to the messages to javascript via the above [@@bs.deriving {accessors}]\n\
        \  attribute on the `msg` type or manually, that way even javascript can use it safely. *)\n\
         let main =\n\
        \  beginnerProgram { (* The beginnerProgram just takes a set model state and the update and view functions *)\n\
        \    model = init (); (* Since model is a set value here, we call our init function to generate that value *)\n\
        \    update;\n\
        \    view;\n\
        \  }")]) ;
    File  ("loader.js",
      "/* Copyright (C) 2018 Authors of BuckleScript\n\
      \ * \n\
      \ * This program is free software: you can redistribute it and/or modify\n\
      \ * it under the terms of the GNU Lesser General Public License as published by\n\
      \ * the Free Software Foundation, either version 3 of the License, or\n\
      \ * (at your option) any later version.\n\
      \ *\n\
      \ * In addition to the permissions granted to you by the LGPL, you may combine\n\
      \ * or link a \"work that uses the Library\" with a publicly distributed version\n\
      \ * of this file to produce a combined library or application, then distribute\n\
      \ * that combined work under the terms of your choosing, with no requirement\n\
      \ * to comply with the obligations normally placed on you by section 4 of the\n\
      \ * LGPL version 3 (or the corresponding section of a later version of the LGPL\n\
      \ * should you choose to use a later version).\n\
      \ *\n\
      \ * This program is distributed in the hope that it will be useful,\n\
      \ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
      \ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
      \ * GNU Lesser General Public License for more details.\n\
      \ * \n\
      \ * You should have received a copy of the GNU Lesser General Public License\n\
      \ * along with this program; if not, write to the Free Software\n\
      \ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */\n\
       \n\
       \n\
       \n\
       //@ts-check\n\
       \n\
       // @ts-ignore\n\
       window.process = { env: { NODE_ENV: 'dev' } }\n\
       \n\
       \n\
       // local to getPath\n\
       var relativeElement = document.createElement(\"a\");\n\
       var baseElement = document.createElement(\"base\");\n\
       document.head.appendChild(baseElement);\n\
       \n\
       export function BsGetPath(id, parent) {\n\
      \    var oldPath = baseElement.href\n\
      \    baseElement.href = parent\n\
      \    relativeElement.href = id\n\
      \    var result = relativeElement.href\n\
      \    baseElement.href = oldPath\n\
      \    return result\n\
       }\n\
       /**\n\
      \ * \n\
      \ * Given current link and its parent, return the new link\n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * @return {string}\n\
      \ */\n\
       function getPathWithJsSuffix(id, parent) {\n\
      \    var oldPath = baseElement.href\n\
      \    baseElement.href = parent\n\
      \    relativeElement.href = id\n\
      \    var result = addSuffixJsIfNot(relativeElement.href)\n\
      \    baseElement.href = oldPath\n\
      \    return result\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} x \n\
      \ */\n\
       function addSuffixJsIfNot(x) {\n\
      \    if (x.endsWith('.js')) {\n\
      \        return x\n\
      \    } else {\n\
      \        return x + '.js'\n\
      \    }\n\
       }\n\
       \n\
       \n\
       var falsePromise = Promise.resolve(false)\n\
       var fetchConfig = {'cache' : 'no-cache'}\n\
       // package.json semantics\n\
       // a string to module object \n\
       // from url -> module object \n\
       // Modules : Map<string, Promise < boolean | string > \n\
       // fetch the link:\n\
       // - if it is already fetched before, return the stored promise\n\
       //   otherwise create the promise which will be filled with the text if successful\n\
       //   or filled with boolean false when failed\n\
       var MODULES = new Map()\n\
       function cachedFetch(link) {\n\
      \    // console.info(link)\n\
      \    var linkResult = MODULES.get(link)\n\
      \    if (linkResult) {\n\
      \        return linkResult\n\
      \    } else {\n\
      \        var p = fetch(link, fetchConfig)\n\
      \            .then(resp => {\n\
      \                if (resp.ok) {\n\
      \                    return resp.text()\n\
      \                } else {\n\
      \                    return falsePromise\n\
      \                }\n\
      \            })\n\
       \n\
      \        MODULES.set(link, p)\n\
      \        return p\n\
      \    }\n\
       }\n\
       \n\
       // from location id -> url \n\
       // There are two rounds of caching:\n\
       // 1. if location and relative path is hit, no need to run \n\
       // 2. if location and relative path is not hit, but the resolved link is hit, no need \n\
       //     for network request\n\
       /**\n\
      \ * @type {Map<string, Map<string, Promise<any> > > }\n\
      \ */\n\
       var IDLocations = new Map()\n\
       \n\
       /**\n\
      \ * @type {Map<string, Map<string, any> > }\n\
      \ */\n\
       var SyncedIDLocations = new Map()\n\
       // Its value is an object \n\
       // { link : String }\n\
       // We will first mark it when visiting (to avoid duplicated computation)\n\
       // and populate its link later\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ */\n\
       function getIdLocation(id, location) {\n\
      \    var idMap = IDLocations.get(location)\n\
      \    if (idMap) {\n\
      \        return idMap.get(id)\n\
      \    }\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ */\n\
       function getIdLocationSync(id, location) {\n\
      \    var idMap = SyncedIDLocations.get(location)\n\
      \    if (idMap) {\n\
      \        return idMap.get(id)\n\
      \    }\n\
       }\n\
       \n\
       function countIDLocations() {\n\
      \    var count = 0\n\
      \    for (let [k, vv] of IDLocations) {\n\
      \        for (let [kv, v] of vv) {\n\
      \            count += 1\n\
      \        }\n\
      \    }\n\
      \    console.log(count, 'modules loaded')\n\
       }\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ * @param {Function} cb \n\
      \ * @returns Promise<any>\n\
      \ */\n\
       function visitIdLocation(id, location, cb) {\n\
      \    var result;\n\
      \    var idMap = IDLocations.get(location)\n\
      \    if (idMap && (result = idMap.get(id))) {\n\
      \        return result\n\
      \    }\n\
      \    else {\n\
      \        result = new Promise(resolve => {\n\
      \            return (cb()).then(res => {\n\
      \                var idMap = SyncedIDLocations.get(location)\n\
      \                if (idMap) {\n\
      \                    idMap.set(id, res)\n\
      \                } else {\n\
      \                    SyncedIDLocations.set(location, new Map([[id, res]]))\n\
      \                }\n\
      \                return resolve(res)\n\
      \            })\n\
      \        })\n\
      \        if (idMap) {\n\
      \            idMap.set(id, result)\n\
      \        }\n\
      \        else {\n\
      \            IDLocations.set(location, new Map([[id, result]]))\n\
      \        }\n\
      \        return result\n\
      \    }\n\
       }\n\
       \n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @return {string[]}\n\
      \ */\n\
       function getDeps(text) {\n\
      \    var deps = []\n\
      \    text.replace(/(\\/\\*[\\w\\W]*?\\*\\/|\\/\\/[^\\n]*|[.$]r)|\\brequire\\s*\\(\\s*[\"']([^\"']*)[\"']\\s*\\)/g, function (_, ignore, id) {\n\
      \        if (!ignore) deps.push(id);\n\
      \    });\n\
      \    return deps;\n\
       }\n\
       \n\
       \n\
       \n\
       // By using a named \"eval\" most browsers will execute in the global scope.\n\
       // http://www.davidflanagan.com/2010/12/global-eval-in.html\n\
       var globalEval = eval;\n\
       \n\
       // function parentURL(url) {\n\
       //     if (url.endsWith('/')) {\n\
       //         return url + '../'\n\
       //     } else {\n\
       //         return url + '/../'\n\
       //     }\n\
       // }\n\
       \n\
       \n\
       \n\
       // loader.js:23 http://localhost:8080/node_modules/react-dom/cjs/react-dom.development.js/..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//../ fbjs/lib/containsNode Promise\xC2\xA0{<pending>}\n\
       // 23:10:02.884 loader.js:23 http://localhost:8080/node_modules/react-dom/cjs/react-dom.development.js/..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//../ fbjs/lib/invariant Promise\xC2\xA0{<pending>}\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ */\n\
       function getParentModulePromise(id, parent) {\n\
      \    var parentLink = BsGetPath('..', parent)\n\
      \    if (parentLink === parent) {\n\
      \        return falsePromise\n\
      \    }\n\
      \    return getPackageJsPromise(id, parentLink)\n\
       }\n\
       // In the beginning\n\
       // it is `resolveModule('./main.js', '')\n\
       // return the promise of link and text \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ */\n\
       function getPackageName(id) {\n\
      \    var index = id.indexOf('/')\n\
      \    if (id[0] === '@') index = id.indexOf('/', index + 1)\n\
      \    if (index === -1) {\n\
      \        return id\n\
      \    }\n\
      \    return id.substring(0, index)\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} s \n\
      \ * @param {string} text \n\
      \ * @returns {undefined | string }\n\
      \ */\n\
       function isJustAPackageAndHasMainField(s,text){\n\
      \    if(s.indexOf('/') >= 0){\n\
      \        return \n\
      \    } else {\n\
      \        var mainField; \n\
      \        try {\n\
      \            mainField = JSON.parse(text).main\n\
      \        }catch(_){\n\
      \        }\n\
      \        if(mainField === undefined){\n\
      \            return \n\
      \        } else {\n\
      \            return mainField\n\
      \        }\n\
      \    }\n\
       }\n\
       function getPackageJsPromise(id, parent) {\n\
      \    var idNodeModulesPrefix = './node_modules/' + id\n\
      \    var link = getPathWithJsSuffix(idNodeModulesPrefix, parent)\n\
      \    if (parent.endsWith('node_modules/')) {\n\
      \        // impossible that `node_modules/node_modules/xx/x\n\
      \        // return falsePromise\n\
      \        return getParentModulePromise(id, parent)\n\
      \    }\n\
       \n\
      \    var packageJson = BsGetPath(`./node_modules/${getPackageName(id)}/package.json`, parent)\n\
       \n\
      \    return cachedFetch(packageJson)\n\
      \        .then(\n\
      \            function (text) {\n\
      \                if (text !== false) {\n\
      \                    var mainField; \n\
      \                    if( (mainField = isJustAPackageAndHasMainField(id, text)) !== undefined){\n\
      \                        var packageLink = BsGetPath(addSuffixJsIfNot(`./node_modules/${id}/${mainField}`), parent)\n\
      \                        return cachedFetch(packageLink)\n\
      \                            .then(function(text){\n\
      \                                if(text !== false){\n\
      \                                    return {text, link : packageLink}\n\
      \                                } else {\n\
      \                                    return getParentModulePromise(id,parent)\n\
      \                                }\n\
      \                            })\n\
       \n\
      \                    } else {\n\
      \                    // package indeed exist\n\
      \                    return cachedFetch(link).then(function (text) {\n\
      \                        if (text !== false) {\n\
      \                            return { text, link }\n\
      \                        } else if (!id.endsWith('.js')) {\n\
      \                            var linkNew = getPathWithJsSuffix(idNodeModulesPrefix + `/index.js`, parent)\n\
      \                            return cachedFetch(linkNew)\n\
      \                                .then(function (text) {\n\
      \                                    if (text !== false) {\n\
      \                                        return { text, link: linkNew }\n\
      \                                    } else {\n\
      \                                        return getParentModulePromise(id, parent)\n\
      \                                    }\n\
      \                                })\n\
       \n\
      \                        } else {\n\
      \                            return getParentModulePromise(id, parent)\n\
      \                        }\n\
      \                    })\n\
      \                }\n\
      \                }\n\
      \                else {\n\
      \                    return getParentModulePromise(id, parent)\n\
      \                }\n\
      \            }\n\
      \        )\n\
       \n\
       \n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * can return Promise <boolean | object>, false means\n\
      \ * this module can not be resolved\n\
      \ */\n\
       function getModulePromise(id, parent) {\n\
      \    var done = getIdLocation(id, parent)\n\
      \    if (!done) {\n\
      \        return visitIdLocation(id, parent, function () {\n\
      \            if (id[0] != '.') { // package path\n\
      \                return getPackageJsPromise(id, parent)\n\
      \            } else { // relative path, one shot resolve            \n\
      \                let link = getPathWithJsSuffix(id, parent)\n\
      \                return cachedFetch(link).then(\n\
      \                    function (text) {\n\
      \                        if (text !== false) {\n\
      \                            return { text, link }\n\
      \                        } else if (!id.endsWith('.js')){                            \n\
      \                            // could be \"./dir\"\n\
      \                            var newLink = getPathWithJsSuffix( id +\"/index.js\",parent)\n\
      \                            return cachedFetch(newLink)\n\
      \                            .then(function(text){\n\
      \                                if(text !== false){\n\
      \                                    return{text, link : newLink }\n\
      \                                } else {\n\
      \                                    throw new Error(` ${id} : ${parent} could not be resolved`)\n\
      \                                }\n\
      \                            })\n\
      \                        }\n\
      \                        else {\n\
      \                            throw new Error(` ${id} : ${parent} could not be resolved`)\n\
      \                        }\n\
      \                    }\n\
      \                )\n\
      \            }\n\
      \        })\n\
      \    } else {\n\
      \        return done\n\
      \    }\n\
       }\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * @returns {Promise<any>}\n\
      \ */\n\
       function getAll(id, parent) {\n\
      \    return getModulePromise(id, parent)\n\
      \        .then(function (obj) {\n\
      \            if (obj) {\n\
      \                var deps = getDeps(obj.text)\n\
      \                return Promise.all(deps.map(x => getAll(x, obj.link)))\n\
      \            } else {\n\
      \                throw new Error(`${id}@${parent} was not resolved successfully`)\n\
      \            }\n\
      \        })\n\
       };\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @param {string} parent \n\
      \ * @returns {Promise<any>}\n\
      \ */\n\
       function getAllFromText(text, parent) {\n\
      \    var deps = getDeps(text)\n\
      \    return Promise.all(deps.map(x => getAll(x, parent)))\n\
       }\n\
       \n\
       var evaluatedModules = new Map()\n\
       \n\
       function loadSync(id, parent) {\n\
      \    var baseOrModule = getIdLocationSync(id, parent)\n\
      \    if (baseOrModule && baseOrModule.link !== undefined) {\n\
      \        if(evaluatedModules.has(baseOrModule.link)){\n\
      \            return evaluatedModules.get(baseOrModule.link).exports\n\
      \        }\n\
      \        if (!baseOrModule.exports) {\n\
      \            baseOrModule.exports = {}\n\
      \            globalEval(`(function(require,exports,module){${baseOrModule.text}\\n})//# sourceURL=${baseOrModule.link}`)(\n\
      \                function require(id) {\n\
      \                    return loadSync(id, baseOrModule.link);\n\
      \                }, // require\n\
      \                baseOrModule.exports = {}, // exports\n\
      \                baseOrModule // module\n\
      \            );\n\
      \        }\n\
      \        if(!evaluatedModules.has(baseOrModule.link)){\n\
      \            evaluatedModules.set(baseOrModule.link,baseOrModule)\n\
      \        }\n\
      \        return baseOrModule.exports\n\
      \    } else {\n\
      \        throw new Error(`${id} : ${parent} could not be resolved`)\n\
      \    }\n\
       }\n\
       \n\
       \n\
       function genEvalName() {\n\
      \    return \"eval-\" + ((\"\" + Math.random()).substr(2, 5))\n\
       }\n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @param {string} link\n\
      \ * In this case [text] evaluated result will not be cached\n\
      \ */\n\
       function loadTextSync(text, link) {\n\
      \    var baseOrModule = { exports: {}, text, link }\n\
      \    globalEval(`(function(require,exports,module){${baseOrModule.text}\\n})//# sourceURL=${baseOrModule.link}/${genEvalName()}.js`)(\n\
      \        function require(id) {\n\
      \            return loadSync(id, baseOrModule.link);\n\
      \        }, // require\n\
      \        baseOrModule.exports, // exports\n\
      \        baseOrModule // module\n\
      \    );\n\
      \    return baseOrModule.exports\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ */\n\
       function BSloadText(text) {\n\
      \    console.time(\"Loading\")\n\
      \    var parent = BsGetPath(\".\", document.baseURI)\n\
      \    return getAllFromText(text, parent).then(function () {\n\
      \        var result = loadTextSync(text, parent)\n\
      \        console.timeEnd(\"Loading\")\n\
      \        return result\n\
      \    })\n\
       };\n\
       \n\
       \n\
       function load(id, parent) {\n\
      \    return getAll(id, parent).then(function () {\n\
      \        return loadSync(id, parent)\n\
      \    })\n\
       \n\
       };\n\
       \n\
       \n\
       export function BSload(id) {\n\
      \    var parent = BsGetPath(\".\", document.baseURI)\n\
      \    return load(id, parent)\n\
       }\n\
       \n\
       export var BSLoader = {\n\
      \    loadText: BSloadText,\n\
      \    load: BSload,\n\
      \    SyncedIDLocations: SyncedIDLocations\n\
       };\n\
       \n\
       window.BSLoader = BSLoader;\n\
       \n\
       var main = document.querySelector('script[data-main]')\n\
       if (main) {\n\
      \    BSload(main.dataset.main)\n\
       }\n\
       ") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"tea\",\n\
      \  \"version\": \"0.1.0\",\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \      \"bucklescript-tea\"\n\
      \  ],\n\
      \  \"warnings\": {\n\
      \    \"error\" : \"+101\"\n\
      \  }\n\
       }\n\
       ") ;
    File  ("watcher.js",
      "\n\
       \n\
       var wsReloader;\n\
       var LAST_SUCCESS_BUILD_STAMP = (localStorage.getItem('LAST_SUCCESS_BUILD_STAMP') || 0)\n\
       var WS_PORT = 9999; // configurable\n\
       \n\
       function setUpWebScoket() {\n\
      \    if (wsReloader == null || wsReloader.readyState !== 1) {\n\
      \        try {\n\
      \            wsReloader = new WebSocket(`ws://localhost:${WS_PORT}`)\n\
      \            wsReloader.onmessage = (msg) => {\n\
      \                var newData = JSON.parse(msg.data).LAST_SUCCESS_BUILD_STAMP\n\
      \                if (newData > LAST_SUCCESS_BUILD_STAMP) {\n\
      \                    LAST_SUCCESS_BUILD_STAMP = newData\n\
      \                    localStorage.setItem('LAST_SUCCESS_BUILD_STAMP', LAST_SUCCESS_BUILD_STAMP)\n\
      \                    location.reload(true)\n\
      \                }\n\
       \n\
      \            }\n\
      \        } catch (exn) {\n\
      \            console.error(\"web socket failed connect\")\n\
      \        }\n\
      \    }\n\
       };\n\
       \n\
       setUpWebScoket();\n\
       setInterval(setUpWebScoket, 2000);") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w -ws _\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bsb-native\": \"^${bsb:bs-version}\"\n\
      \  },\n\
      \  \"dependencies\": {\n\
      \    \"bucklescript-tea\": \"^0.7.4\"\n\
      \  }\n\
       }\n\
       ") ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       create a http-server\n\
       \n\
       ```\n\
       npm install -g http-server\n\
       ```\n\
       \n\
       Edit the file and see the changes automatically reloaded in the browser\n\
       ") ;
    File  ("index.html",
      "<!DOCTYPE html>\n\
       <html lang=\"en\">\n\
      \  <head>\n\
      \    <meta charset=\"utf-8\">\n\
      \    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\
      \    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\
      \    <meta name=\"description\" content=\"\">\n\
      \    <meta name=\"author\" content=\"\">\n\
      \    <title>Bucklescript TEA Starter Kit</title>\n\
      \  </head>\n\
      \  \n\
       \n\
       \n\
      \  <body>\n\
      \    <div id=\"my-element\"> </div>\n\
      \    <script src=\"./loader.js\" type=\"module\" data-main=\"./src/main.bs.js\"></script>\n\
      \    <script src=\"./watcher.js\" type=\"module\"></script>\n\
      \    \n\
      \  </body>\n\
       </html>")])
])
